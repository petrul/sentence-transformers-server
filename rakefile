task :default => :run do
end

task :run do |t|
    shell 'uvicorn src.simile.restapi:app  --port 11111  --reload'
end

task :unittest do |t|
    shell 'python3 -m unittest -v tests/*.py'
end

task :test => :pytest

# to select a specific testcase, use
# $ pytest tests/*.py -v -k inmem -rP
task :pytest do |t|
    shell 'pytest -m src src/**/*-test.py -v -rP'
end

def shell(cmd)
    puts "#{cmd}"
    system "#{cmd}"
end

task :clean do
    # shell "rm -rf .pytest_cache"
    shell "find . -name .pytest_cache -type d -exec rm -rvf  \{\} \\;"
    shell "find . -name __pycache__ -type d -exec rm -rvf  \{\} \\;"
end

registry = "mini.local:5000"
baseImagelabel="editii/sentence_transformers_base:0.1-SNAPSHOT"
serverImagelabel="editii/sentence_transformers_server:0.1-SNAPSHOT"

desc 'builds a base for any sentence_transformers based docker image: basically python + downloads basic models'
task :docker_base do
    shell "docker build -t #{baseImagelabel} -f docker/sentence_transformers_base.dockerfile ."
end

desc 'builds a the sentence_transformers_server docker image'
task :docker_server do
    shell "docker build -t #{serverImagelabel} -f docker/sentence_transformers_server.dockerfile ."
end

desc 'publishes the sentence_transformers_base docker image'
task :docker_base_publish do
    remoteimagelabel = "#{registry}/#{baseImagelabel}"
    shell "docker push #{remoteimagelabel}"
end

desc 'publishes the sentence_transformers_server docker image'
task :docker_server_publish do
    remoteimagelabel = "#{registry}/#{serverImagelabel}"
    shell "docker tag #{serverImagelabel} #{remoteimagelabel}"
    shell "docker push #{remoteimagelabel}"
end
